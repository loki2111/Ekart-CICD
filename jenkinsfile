pipeline {
    agent any

    tools {
        maven 'maven3'
        jdk 'jdk17'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/loki2111/Ekart-CICD'
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Unit Tests') {
            steps {
            	echo 'we dont have test cases so we will be skipping this part'
                sh 'mvn test -DskipTests=true'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                
                withSonarQubeEnv('sonar') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=EKART -Dsonar.projectName=EKART \
                        -Dsonar.java.binaries=.
                       '''
                }
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        stage('Deploy To Nexus') {
            steps {
                echo "deploying artifacts to nexus repository "
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                   sh "mvn deploy -DskipTests=True"
                }
            }
        }
        stage('Docker Build & tag Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockercred', toolName: 'docker') {
                        sh 'docker build -t lokesh2111/ekart:latest -f docker/Dockerfile .'
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                echo "Image vulnarabilities scanning by Trivi"
                sh 'trivy image lokesh2111/ekart:latest > trivy-report.txt'
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockercred', toolName: 'docker') {
                        sh 'docker push lokesh2111/ekart:latest'
                    }
                }
            }
        }
        stage('Kubernetes Deploy') {
            steps {
                withKubeConfig(caCertificate: '',
                               clusterName: '',
                               contextName: '',
                               credentialsId: 'k8s-token',
                               namespace: 'webapps',
                               restrictKubeConfigAccess: false,
                               serverUrl: 'https://172.31.82.201:6443') {
                    sh 'kubectl apply -f deploymentservice.yaml -n webapps'
                    sh 'kubectl get svc -n webapps'
                }
            }
        }
    }
}